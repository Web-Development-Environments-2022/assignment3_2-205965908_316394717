openapi: 3.0.3
servers:
  - description: LocalHost
    url: http://127.0.0.1:80
  - description: BGU Web Host
    url: https://natanyagrandmarecipes.cs.bgu.ac.il/
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Or-Fadlon/Assignment3.1API/1.0.0
info:
  title: The recipes of Grandma and others API
  version: "1.0.0"
  description: This API is part of Assignment-3. Consume by "The recipes of Grandma and others" website.
  contact:
    name: Or Fadlon
    url: https://natanyagrandmarecipes.cs.bgu.ac.il/
    email: fadlonor@post.bgu.ac.il
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

tags:
  - name: Auth
    description: All authentication related routes
  - name: Users
    description: Handle the User entity in the system. get and create
  - name: Recipes
    description: Handle the Recipe entity in the system. get and create

paths:
  /recipes:
    post:
      tags:
        - Recipes
      summary: add new recipe item
      operationId: createRecipe
      description: Adds an item to the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeCreateDto'
        description: Recipe item to add
      security:
        - ApiKeyAuth: [] 
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - Recipes
      summary: Get all recipes use filter options
      operationId: getRecipes
      description: |
        Get the recipes in the database base on filters
      parameters:
        - in: query
          name: query
          description: pass an optional search name string for looking up recipes
          required: false
          schema:
            type: string
            example: 'Pasta'
        - in: query
          name: cuisine
          description: pass an optional search cuisine string for looking up recipes
          required: false
          schema:
            type: string
            example: 'Jewish'
        - in: query
          name: diet
          description: pass an optional search diet string for looking up recipes
          required: false
          schema:
            type: string
            example: 'Ketogenic'
        - in: query
          name: intolerance
          description: pass an optional search intolerance string for looking up recipes
          required: false
          schema:
            type: string
            example: 'Sesame'
        - in: query
          name: sortBy
          description: pass an optional search sort enum for looking up recipes
          required: false
          schema:
            type: string
            enum: [ 'time', 'popularity' ]
            example: 'popularity'
        - in: query
          name: sortDirection
          description: pass an optional search sort enum for looking up recipes
          required: false
          schema:
            type: string
            enum: [ 'asc', 'desc' ]
            example: 'desc'
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
          example: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 30
          example: 10
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePreviewPages'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/random/{num}:
    get:
      tags:
        - Recipes
      summary: Get random recipes
      operationId: getRandomRecipes
      description: |
        Get random recipes as many as requested
      parameters:
        - in: path
          name: num
          description: number of recipes to get
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/my:
    get:
      tags:
        - Recipes
      summary: Get my recipes
      operationId: getMyRecipes
      description: |
        Get the recipes that the user added to the system
      security:
        - ApiKeyAuth: [] 
      parameters:
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
          example: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 30
          example: 10
      responses:
        '200':
          description: favorite recipes results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePreviewPages'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/family:
    get:
      tags:
        - Recipes
      summary: Get family recipes
      operationId: getFamilyRecipes
      description: |
        Get the recipes of the user family
      security:
        - ApiKeyAuth: [] 
      parameters:
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
          example: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 30
          example: 10
      responses:
        '200':
          description: favorite recipes results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePreviewPages'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/my/{recipeId}:
    get:
      tags:
        - Recipes
      summary: Get specific data about my recipe
      operationId: getMySpecificRecipe
      description: |
        Get specific data about recipe that the user added to the system
      parameters:
        - in: path
          name: recipeId
          description: id of recipe to get
          required: true
          schema:
            type: integer
      security:
        - ApiKeyAuth: [] 
      responses:
        '200':
          description: get specific data about recipe that the user added to the system
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePage'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/{recipeId}:
    get:
      tags:
        - Recipes
      summary: Get specific recipe
      operationId: getRecipe
      description: |
        Get specific recipe
      security:
        - ApiKeyAuth: [] 
      parameters:
        - in: path
          name: recipeId
          description: recipe id to lookup
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: search result matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePage'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/viewed:
    get:
      tags:
        - Recipes
      summary: Get viewed recipes
      operationId: getViewedRecipes
      description: |
        Get the recipes that the user watched before
      security:
        - ApiKeyAuth: [] 
      responses:
        '200':
          description: all viewed recipes results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/viewed/{num}:
    get:
      tags:
        - Recipes
      summary: Get user N recent viewed recipes
      operationId: getUserRecentViewed
      description: |
        Get user N recent viewed recipes
      security:
        - ApiKeyAuth: [] 
      parameters:
        - in: path
          name: num
          description: number of recipes to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: all viewed recipes results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/favorites:
    get:
      tags:
        - Recipes
      summary: Get favorite recipes
      operationId: getFavoriteRecipes
      description: |
        Get the recipes that the user save before
      security:
        - ApiKeyAuth: [] 
      parameters:
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
          example: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 30
          example: 10
      responses:
        '200':
          description: favorite recipes results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePreviewPages'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /register:
    post:
      tags:
        - Auth
      summary: Create new user in the system
      operationId: createUser
      description: |
        Create new user in the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpsertDto'
        description: User item to add
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /login:
    post:
      tags:
        - Auth
      summary: Login user
      operationId: loginUser
      description: |
        Login user base on userName and password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginDto'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /logout:
    post:
      tags:
        - Auth
      summary: Logout user
      operationId: logoutUser
      description: |
        Logout user base on private code
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me:
    get:
      tags:
        - Users
      summary: Get user card data
      operationId: getUserMe
      description: |
        Get user card data containing all the needed data about the user
        for his personal page
      security:
        - ApiKeyAuth: [] 
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/favorites:
    post:
      tags:
        - Users
      summary: Add recipe to favorite recipes
      operationId: favoriteRecipeAdd
      description: |
        Add recipe to favorite recipes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddFavoriteDto'
      security:
        - ApiKeyAuth: [] 
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/favorites/{recipeId}:
    delete:
      tags:
        - Users
      summary: remove recipe from favorite recipes
      operationId: favoriteRecipeRemove
      description: |
        remove recipe from favorite recipes
      parameters:
        - in: path
          name: recipeId
          description: recipe id
          required: true
          schema:
            type: integer
      security:
        - ApiKeyAuth: [] 
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /equipments:
    get:
      tags:
        - Equipments
      summary: Get Equipments from system data
      operationId: getEquipments
      description: |
        Get all the equipments form the system db for general purpose
      security:
        - ApiKeyAuth: [] 
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Equipment'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /ingredients:
    get:
      tags:
        - Ingredients
      summary: Get Ingredients from system data
      operationId: getIngredients
      description: |
        Get all the ingredients form the system db for general purpose
      security:
        - ApiKeyAuth: [] 
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IngredientSmall'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'


components:
  responses:
    OK:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Created:
      description: Created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Accepted:
      description: Accepted
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NoContent:
      description: No Content
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Authorization information is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: The specified resource was conflict with other resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    ApiKeyAuth:        # arbitrary name for the security scheme
      type: apiKey
      in: cookie       # can be "header", "query" or "cookie"
      name: session  # name of the header, query parameter or cookie
  schemas:
    # Schema for error response body
    Error:
      type: object
      properties:
        status:
          type: integer
          example: 0
        message:
          type: string
          example: 'message depend on status code'
      required:
        - status
        - message
    Recipe:
      type: object
      properties:
        id:
          type: integer
          format: number
          example: 12
        title:
          type: string
          example: Mafroom
        readyInMinutes:
          type: integer
          format: minutes
          example: 60
        image:
          type: string
          format: path
          example: 'https://webknox.com/recipeImages/749013-556x370.jpg'
        popularity:
          type: integer
          example: 100
        vegan:
          type: boolean
          example: False
        vegetarian:
          type: boolean
          example: True
        glutenFree:
          type: boolean
          example: False
        hasViewed:
          type: boolean
          example: True
        isFavorite:
          type: boolean
          example: True
      required:
        - id
        - title
        - readyInMinutes
        - likes
        - vegetarian
        - vegan
        - glutenFree
        - hasViewed
        - isFavorite
        - image
    RecipePreviewPages:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Recipe'
        offset:
          type: integer
          example: 20
        number:
          type: integer
          example: 10
        totalResults:
          type: integer
          example: 250
      required:
        - results
        - offset
        - number
        - totalResults
    RecipePage:
      type: object
      properties:
        id:
          type: integer
          format: number
          example: 15
        title:
          type: string
          example: Mafroom
        readyInMinutes:
          type: integer
          format: minutes
          example: 60
        popularity:
          type: integer
          example: 100
        vegetarian:
          type: boolean
          example: True
        vegan:
          type: boolean
          example: False
        glutenFree:
          type: boolean
          example: False
        hasViewed:
          type: boolean
          example: True
        isFavorite:
          type: boolean
          example: True
        # Family Page Data
        inventedBy:
          type: string
          format: name
          example: 'granny Roti'
        serveDay:
          type: string
          example: 'Friday noon'
        #
        image:
          type: string
          format: path
          example: 'https://webknox.com/recipeImages/749013-556x370.jpg'
        servings:
          type: integer
          format: amount
          example: 4
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/Ingredient'
        equipments:
          type: array
          items:
            $ref: '#/components/schemas/Equipment'
        instructions:
          type: array
          items:
            $ref: '#/components/schemas/InstructionSet'
      required:
        - id
        - title
        - readyInMinutes
        - likes
        - vegetarian
        - vegan
        - glutenFree
        - hasViewed
        - isFavorite
        - image
        - servings
        - ingredients
        - equipments
        - instructions
    RecipeCreateDto:
      type: object
      properties:
        title:
          type: string
          example: Mafroom
        readyInMinutes:
          type: integer
          format: minutes
          example: 60
        vegetarian:
          type: boolean
          example: True
        vegan:
          type: boolean
          example: False
        glutenFree:
          type: boolean
          example: False
        image:
          type: string
          format: path
          example: 'https://webknox.com/recipeImages/749013-556x370.jpg'
        instructions:
          type: array
          items:
            $ref: '#/components/schemas/InstructionInsertDto'
        servings:
          type: integer
          format: amount
          example: 4
        inventedBy:
          type: string
          example: "Granny"
        serveDay:
          type: string
          example: "Hanuka"
      required:
        - title
        - readyInMinutes
        - vegetarian
        - vegan
        - glutenFree
        - image
        - instructions
        - servings
        - inventedBy
        - serveDay
    Ingredient:
      properties:
        id:
          type: integer
          format: number
          example: 3
        name:
          type: string
          example: Avocado
        amount:
          type: integer
          example: 10
        amountType:
          type: string
          enum: [ 'gram', 'litter', 'unit', 'spoon', 'cup' ]
          example: 'gram'
        image:
          type: string
          format: path
          example: 'https://webknox.com/recipeImages/749013-556x370.jpg'
      required:
        - id
        - name
        - amount
        - amountType
        - image
    IngredientSmall:
      properties:
        id:
          type: integer
          format: number
          example: 3
        name:
          type: string
          example: Avocado
        image:
          type: string
          format: path
          example: 'https://webknox.com/recipeImages/749013-556x370.jpg'
      required:
        - id
        - name
        - image
    IngredientInsertDto:
      properties:
        id:
          type: integer
          format: number
          example: 1
        amount:
          type: integer
          example: 10
        amountType:
          type: string
          enum: [ 'gram', 'litter', 'unit', 'spoon', 'cup' ]
          example: 'gram'
      required:
        - id
        - amount
        - amountType
    Instruction:
      properties:
        equipments:
          type: array
          items:
            $ref: '#/components/schemas/Equipment'
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/IngredientSmall'
        number:
          type: integer
          example: 3
        step:
          type: string
          example: 'mix all in high speed using mixer'
      required:
        - equipments
        - ingredients
        - number
        - step
    InstructionSet:
      properties:
        name:
          type: string
          example: 'cary sauce'
        steps:
          type: array
          items:
            $ref: '#/components/schemas/Instruction'
      required:
        - name
        - steps
    InstructionInsertDto:
      properties:
        equipments:
          type: array
          items:
            $ref: '#/components/schemas/EquipmentInsertDto'
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/IngredientInsertDto'
        number:
          type: integer
          example: 3
        step:
          type: string
          example: 'mix all in high speed using mixer'
      required:
        - equipments
        - ingredients
        - number
        - step
    Equipment:
      properties:
        id:
          type: integer
          format: number
          example: 8
        name:
          type: string
          example: Knife
        image:
          type: string
          format: path
          example: 'https://cdn.shopify.com/s/files/1/1186/5476/products/chefs-knife-black-191015-shoppage_63c5525d-e6a0-4e39-a59a-6e10ee351fd4_3311x.jpg?v=1650903908'
      required:
        - id
        - name
        - image
    EquipmentInsertDto:
      properties:
        id:
          type: integer
          format: number
          example: 3
      required:
        - id
    User:
      properties:
        id:
          type: integer
          format: number
          example: 6
        userName:
          type: string
          example: israel69
        firstName:
          type: string
          example: Israel
        lastName:
          type: string
          example: Israeli
        country:
          type: string
          example: Israel
        password:
          type: string
          example: 1$r4el1948
        email:
          type: string
          format: e-mail
          example: israel@israel.co.il
      required:
        - id
        - userName
        - firstName
        - lastName
        - country
        - password
        - email

    UserUpsertDto:
      properties:
        userName:
          type: string
          example: israel69
        firstName:
          type: string
          example: Israel
        lastName:
          type: string
          example: Israeli
        country:
          type: string
          example: Israel
        password:
          type: string
          example: 1$r4el1948
        email:
          type: string
          format: e-mail
          example: israel@israel.co.il
      required:
        - userName
        - firstName
        - lastName
        - country
        - password
        - email

    UserLoginDto:
      properties:
        userName:
          type: string
          example: israel69
        password:
          type: string
          example: 1$r4el1948
      required:
        - userName
        - password

    AddFavoriteDto:
      properties:
        recipeId:
          type: integer
          example: 100
      required:
        - recipeId
